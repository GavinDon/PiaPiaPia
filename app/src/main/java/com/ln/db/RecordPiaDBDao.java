package com.ln.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_PIA_DB".
*/
public class RecordPiaDBDao extends AbstractDao<RecordPiaDB, Long> {

    public static final String TABLENAME = "RECORD_PIA_DB";

    /**
     * Properties of entity RecordPiaDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Num = new Property(3, String.class, "num", false, "NUM");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property TotalTime = new Property(5, String.class, "totalTime", false, "TOTAL_TIME");
        public final static Property Commant = new Property(6, String.class, "commant", false, "COMMANT");
        public final static Property YuFang = new Property(7, boolean.class, "YuFang", false, "YU_FANG");
        public final static Property Doublec = new Property(8, boolean.class, "doublec", false, "DOUBLEC");
    }


    public RecordPiaDBDao(DaoConfig config) {
        super(config);
    }
    
    public RecordPiaDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_PIA_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"TIME\" TEXT," + // 2: time
                "\"NUM\" TEXT," + // 3: num
                "\"LOCATION\" TEXT," + // 4: location
                "\"TOTAL_TIME\" TEXT," + // 5: totalTime
                "\"COMMANT\" TEXT," + // 6: commant
                "\"YU_FANG\" INTEGER NOT NULL ," + // 7: YuFang
                "\"DOUBLEC\" INTEGER NOT NULL );"); // 8: doublec
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_PIA_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordPiaDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(6, totalTime);
        }
 
        String commant = entity.getCommant();
        if (commant != null) {
            stmt.bindString(7, commant);
        }
        stmt.bindLong(8, entity.getYuFang() ? 1L: 0L);
        stmt.bindLong(9, entity.getDoublec() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordPiaDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(6, totalTime);
        }
 
        String commant = entity.getCommant();
        if (commant != null) {
            stmt.bindString(7, commant);
        }
        stmt.bindLong(8, entity.getYuFang() ? 1L: 0L);
        stmt.bindLong(9, entity.getDoublec() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordPiaDB readEntity(Cursor cursor, int offset) {
        RecordPiaDB entity = new RecordPiaDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // totalTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commant
            cursor.getShort(offset + 7) != 0, // YuFang
            cursor.getShort(offset + 8) != 0 // doublec
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordPiaDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommant(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYuFang(cursor.getShort(offset + 7) != 0);
        entity.setDoublec(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordPiaDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordPiaDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordPiaDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
